/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practica6.pkg2.pkg0;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.HashMap;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;

/**
 *Esta ventana contiene todos los pacientes creados, si se acttiva la casilla de un paciente se actualizan los datos de ese paciente, tambien se puede mostrar sola con el boton mostrar ventana global.
 * @author nacho
 */
public class GlobalWindowPressureListener extends javax.swing.JFrame implements PropertyChangeListener {
//Declaracion de variables
    private PatientListWindow listWindow;
    private HashMap<Patient, JLabel> maxLabels;
    private HashMap<Patient, JLabel> minLabels;
    private HashMap<Patient, JPanel> panel;

    /**
     * Creates new form GlobalWindowPressureListener
     * @param listWindow
     */
    public GlobalWindowPressureListener(PatientListWindow listWindow) {
        initComponents();
        this.listWindow = listWindow;
        this.maxLabels = new HashMap<>();
        this.minLabels = new HashMap<>();
        this.panel = new HashMap<>();
    }

    /**
     *Este metodo cuando el listener escucha un cambio, si se sale de los valores acpetados pinta los bordes de los labels de rojo.
     * @param evt
     */
    public void propertyChange(PropertyChangeEvent evt) {
        Patient p = (Patient) evt.getSource();
        Border borderRed = BorderFactory.createLineBorder(Color.red, 2);
        if (evt.getPropertyName().equals("MaxPressure")) {
            maxLabels.get(p).setText("" + evt.getNewValue() + "");
            Double maxD = Double.parseDouble(maxLabels.get(p).getText());
            if (maxD > Patient.MAX_PERMIT_PRESSURE) {

                maxLabels.get(p).setBorder(borderRed);
            } else {
                maxLabels.get(p).setBorder(null);
            }
        } else {
            minLabels.get(p).setText("" + evt.getNewValue() + "");
            Double minD = Double.parseDouble(minLabels.get(p).getText());
            if (minD < Patient.MIN_PERMIT_PRESSURE) {

                minLabels.get(p).setBorder(borderRed);
            } else {
                minLabels.get(p).setBorder(null);
            }
        }

    }

    /**
     *Crea un nuevo panel dentro de la ventana cuando detecta un paciente nuevo.
     * @param p
     * @return
     */
    public JPanel detectsNewPatient(Patient p) {

        JPanel jpanel = new JPanel();
        jpanel.setLayout(new GridLayout(3, 2));
        jpanel.add(new JLabel("Patient:"));
        jpanel.add(new JLabel(p.getName()));
        jpanel.add(new JLabel("Max Pressure:"));
        String maxPressure = Double.toString(p.getMaxPressure());
        JLabel max = new JLabel(maxPressure);
        jpanel.add(max);
        maxLabels.put(p, max);
        jpanel.add(new JLabel("Min Pressure:"));
        String minPressure = Double.toString(p.getMinPressure());
        JLabel min = new JLabel(minPressure);
        jpanel.add(min);
        minLabels.put(p, min);
        jpanel.setVisible(true);
        jPanel1.add(jpanel);
        jPanel1.repaint();

        panel.put(p, jpanel);

        repaint();

        return jpanel;

    }

    /**
     *Elimina un paciente, es decir un panel de la ventana de monitoreo.
     * @param p
     */
    public void deletePatientFromJPanel(Patient p) {
        jPanel1.remove(panel.get(p));
        panel.remove(p);
        jPanel1.repaint();
        jPanel1.updateUI();
        repaint();

    }

    /**
     *Actualiza la ventana de monitoreo.
     * @param p
     */
    public void updateGlobalPanel(Patient p) {
        jPanel1.repaint();
        jPanel1.updateUI();
        repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(300, 300));

        jPanel1.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
